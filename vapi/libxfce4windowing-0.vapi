/* libxfce4windowing-0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "libxfce4windowing", gir_namespace = "Libxfce4windowing", gir_version = "0.0", lower_case_cprefix = "libxfce4windowing_")]
namespace libxfce4windowing {
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwApplication", type_id = "xfw_application_get_type ()")]
	public abstract class Application : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Application ();
		[CCode (cname = "xfw_application_get_gicon")]
		[Version (since = "4.19.1")]
		public unowned GLib.Icon get_gicon ();
		[CCode (cname = "xfw_application_get_icon")]
		public unowned Gdk.Pixbuf? get_icon (int size, int scale);
		[CCode (cname = "xfw_application_get_id")]
		public uint64 get_id ();
		[CCode (cname = "xfw_application_get_instance")]
		public unowned libxfce4windowing.ApplicationInstance? get_instance (libxfce4windowing.Window window);
		[CCode (cname = "xfw_application_get_instances")]
		public unowned GLib.List<libxfce4windowing.ApplicationInstance>? get_instances ();
		[CCode (cname = "xfw_application_get_name")]
		public unowned string get_name ();
		[CCode (cname = "xfw_application_get_windows")]
		public unowned GLib.List<libxfce4windowing.Window> get_windows ();
		[CCode (cname = "xfw_application_icon_is_fallback")]
		[Version (since = "4.19.1")]
		public bool icon_is_fallback ();
		[NoAccessorMethod]
		public GLib.Icon gicon { owned get; }
		[NoAccessorMethod]
		public uint64 id { get; }
		[NoAccessorMethod]
		public void* instances { get; }
		[NoAccessorMethod]
		public string name { owned get; }
		[NoAccessorMethod]
		public void* windows { get; }
		public signal void icon_changed ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwApplicationInstance", has_type_id = false)]
	[Compact]
	public class ApplicationInstance {
		[CCode (cname = "xfw_application_instance_get_name")]
		[Version (since = "4.19.1")]
		public unowned string get_name ();
		[CCode (cname = "xfw_application_instance_get_pid")]
		[Version (since = "4.19.1")]
		public int get_pid ();
		[CCode (cname = "xfw_application_instance_get_windows")]
		[Version (since = "4.19.1")]
		public unowned GLib.List<libxfce4windowing.Window> get_windows ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwApplicationWayland", type_id = "xfw_application_wayland_get_type ()")]
	public class ApplicationWayland : libxfce4windowing.Application {
		[CCode (has_construct_function = false)]
		protected ApplicationWayland ();
		[NoAccessorMethod]
		public string app_id { owned get; construct; }
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwApplicationX11", type_id = "xfw_application_x11_get_type ()")]
	public class ApplicationX11 : libxfce4windowing.Application {
		[CCode (has_construct_function = false)]
		protected ApplicationX11 ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwScreenInterface", has_type_id = false)]
	[Compact]
	public class ScreenInterface {
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwScreenWayland", type_id = "xfw_screen_wayland_get_type ()")]
	public class ScreenWayland : GLib.Object, libxfce4windowing.Screen {
		[CCode (has_construct_function = false)]
		protected ScreenWayland ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwScreenX11", type_id = "xfw_screen_x11_get_type ()")]
	public class ScreenX11 : GLib.Object, libxfce4windowing.Screen {
		[CCode (has_construct_function = false)]
		protected ScreenX11 ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWindow", type_id = "xfw_window_get_type ()")]
	public abstract class Window : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Window ();
		[CCode (cname = "xfw_window_activate")]
		public bool activate (uint64 event_timestamp) throws GLib.Error;
		[CCode (cname = "xfw_window_close")]
		public bool close (uint64 event_timestamp) throws GLib.Error;
		[CCode (cname = "xfw_window_get_application")]
		public unowned libxfce4windowing.Application get_application ();
		[CCode (cname = "xfw_window_get_capabilities")]
		public libxfce4windowing.WindowCapabilities get_capabilities ();
		[CCode (cname = "xfw_window_get_geometry")]
		public unowned Gdk.Rectangle? get_geometry ();
		[CCode (cname = "xfw_window_get_gicon")]
		[Version (since = "4.19.1")]
		public unowned GLib.Icon get_gicon ();
		[CCode (cname = "xfw_window_get_icon")]
		public unowned Gdk.Pixbuf? get_icon (int size, int scale);
		[CCode (cname = "xfw_window_get_id")]
		public uint64 get_id ();
		[CCode (cname = "xfw_window_get_monitors")]
		public unowned GLib.List<Gdk.Monitor>? get_monitors ();
		[CCode (cname = "xfw_window_get_name")]
		public unowned string? get_name ();
		[CCode (cname = "xfw_window_get_screen")]
		public unowned libxfce4windowing.Screen get_screen ();
		[CCode (cname = "xfw_window_get_state")]
		public libxfce4windowing.WindowState get_state ();
		[CCode (cname = "xfw_window_get_window_type")]
		public libxfce4windowing.WindowType get_window_type ();
		[CCode (cname = "xfw_window_get_workspace")]
		public unowned libxfce4windowing.Workspace? get_workspace ();
		[CCode (cname = "xfw_window_icon_is_fallback")]
		[Version (since = "4.19.1")]
		public bool icon_is_fallback ();
		[CCode (cname = "xfw_window_is_above")]
		public bool is_above ();
		[CCode (cname = "xfw_window_is_active")]
		public bool is_active ();
		[CCode (cname = "xfw_window_is_below")]
		public bool is_below ();
		[CCode (cname = "xfw_window_is_fullscreen")]
		public bool is_fullscreen ();
		[CCode (cname = "xfw_window_is_in_viewport")]
		public bool is_in_viewport (libxfce4windowing.Workspace workspace);
		[CCode (cname = "xfw_window_is_maximized")]
		public bool is_maximized ();
		[CCode (cname = "xfw_window_is_minimized")]
		public bool is_minimized ();
		[CCode (cname = "xfw_window_is_on_workspace")]
		public bool is_on_workspace (libxfce4windowing.Workspace workspace);
		[CCode (cname = "xfw_window_is_pinned")]
		public bool is_pinned ();
		[CCode (cname = "xfw_window_is_shaded")]
		public bool is_shaded ();
		[CCode (cname = "xfw_window_is_skip_pager")]
		public bool is_skip_pager ();
		[CCode (cname = "xfw_window_is_skip_tasklist")]
		public bool is_skip_tasklist ();
		[CCode (cname = "xfw_window_is_urgent")]
		public bool is_urgent ();
		[CCode (cname = "xfw_window_move_to_workspace")]
		public bool move_to_workspace (libxfce4windowing.Workspace workspace) throws GLib.Error;
		[CCode (cname = "xfw_window_set_above")]
		public bool set_above (bool is_above) throws GLib.Error;
		[CCode (cname = "xfw_window_set_below")]
		public bool set_below (bool is_below) throws GLib.Error;
		[CCode (cname = "xfw_window_set_button_geometry")]
		public bool set_button_geometry (Gdk.Window relative_to, Gdk.Rectangle rect) throws GLib.Error;
		[CCode (cname = "xfw_window_set_fullscreen")]
		public bool set_fullscreen (bool is_fullscreen) throws GLib.Error;
		[CCode (cname = "xfw_window_set_geometry")]
		public bool set_geometry (Gdk.Rectangle rect) throws GLib.Error;
		[CCode (cname = "xfw_window_set_maximized")]
		public bool set_maximized (bool is_maximized) throws GLib.Error;
		[CCode (cname = "xfw_window_set_minimized")]
		public bool set_minimized (bool is_minimized) throws GLib.Error;
		[CCode (cname = "xfw_window_set_pinned")]
		public bool set_pinned (bool is_pinned) throws GLib.Error;
		[CCode (cname = "xfw_window_set_shaded")]
		public bool set_shaded (bool is_shaded) throws GLib.Error;
		[CCode (cname = "xfw_window_set_skip_pager")]
		public bool set_skip_pager (bool is_skip_pager) throws GLib.Error;
		[CCode (cname = "xfw_window_set_skip_tasklist")]
		public bool set_skip_tasklist (bool is_skip_tasklist) throws GLib.Error;
		[CCode (cname = "xfw_window_start_move")]
		public bool start_move () throws GLib.Error;
		[CCode (cname = "xfw_window_start_resize")]
		public bool start_resize () throws GLib.Error;
		[NoAccessorMethod]
		public libxfce4windowing.Application application { owned get; }
		[NoAccessorMethod]
		public libxfce4windowing.WindowCapabilities capabilities { get; }
		[NoAccessorMethod]
		public GLib.Icon gicon { owned get; }
		[NoAccessorMethod]
		public uint64 id { get; }
		[NoAccessorMethod]
		public void* monitors { get; }
		[NoAccessorMethod]
		public string name { owned get; }
		[NoAccessorMethod]
		public libxfce4windowing.Screen screen { owned get; construct; }
		[NoAccessorMethod]
		public libxfce4windowing.WindowState state { get; }
		[NoAccessorMethod]
		public libxfce4windowing.WindowType type { get; }
		[NoAccessorMethod]
		public libxfce4windowing.Workspace workspace { owned get; }
		public signal void capabilities_changed (libxfce4windowing.WindowCapabilities changed_mask, libxfce4windowing.WindowCapabilities new_state);
		public signal void closed ();
		public signal void geometry_changed ();
		public signal void icon_changed ();
		public signal void name_changed ();
		public signal void state_changed (libxfce4windowing.WindowState changed_mask, libxfce4windowing.WindowState new_state);
		public signal void type_changed (libxfce4windowing.WindowType old_type);
		public signal void workspace_changed ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWindowWayland", type_id = "xfw_window_wayland_get_type ()")]
	public class WindowWayland : libxfce4windowing.Window {
		[CCode (has_construct_function = false)]
		protected WindowWayland ();
		[NoAccessorMethod]
		public void* handle { get; construct; }
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWindowX11", type_id = "xfw_window_x11_get_type ()")]
	public class WindowX11 : libxfce4windowing.Window {
		[CCode (has_construct_function = false)]
		protected WindowX11 ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWnckIcon", type_id = "xfw_wnck_icon_get_type ()")]
	public class WnckIcon : GLib.Object, GLib.Icon, GLib.Initable, GLib.LoadableIcon {
		[CCode (has_construct_function = false)]
		protected WnckIcon ();
		[NoAccessorMethod]
		public GLib.Object wnck_object { owned get; construct; }
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceDummy", type_id = "xfw_workspace_dummy_get_type ()")]
	public class WorkspaceDummy : GLib.Object, libxfce4windowing.Workspace {
		[CCode (has_construct_function = false)]
		protected WorkspaceDummy ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceGroupDummy", type_id = "xfw_workspace_group_dummy_get_type ()")]
	public class WorkspaceGroupDummy : GLib.Object, libxfce4windowing.WorkspaceGroup {
		[CCode (has_construct_function = false)]
		protected WorkspaceGroupDummy ();
		[NoAccessorMethod]
		public void* create_workspace_func { get; set construct; }
		[NoAccessorMethod]
		public void* move_viewport_func { get; set construct; }
		[NoAccessorMethod]
		public void* set_layout_func { get; set construct; }
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceGroupInterface", has_type_id = false)]
	[Compact]
	public class WorkspaceGroupInterface {
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceGroupWayland", type_id = "xfw_workspace_group_wayland_get_type ()")]
	public class WorkspaceGroupWayland : GLib.Object, libxfce4windowing.WorkspaceGroup {
		[CCode (has_construct_function = false)]
		protected WorkspaceGroupWayland ();
		public signal void destroyed ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceInterface", has_type_id = false)]
	[Compact]
	public class WorkspaceInterface {
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceManagerDummy", type_id = "xfw_workspace_manager_dummy_get_type ()")]
	public class WorkspaceManagerDummy : GLib.Object, libxfce4windowing.WorkspaceManager {
		[CCode (has_construct_function = false)]
		protected WorkspaceManagerDummy ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceManagerInterface", has_type_id = false)]
	[Compact]
	public class WorkspaceManagerInterface {
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceManagerWayland", type_id = "xfw_workspace_manager_wayland_get_type ()")]
	public class WorkspaceManagerWayland : GLib.Object, libxfce4windowing.WorkspaceManager {
		[CCode (has_construct_function = false)]
		protected WorkspaceManagerWayland ();
		[NoAccessorMethod]
		public void* wl_manager { get; construct; }
		[NoAccessorMethod]
		public void* wl_registry { get; construct; }
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceManagerX11", type_id = "xfw_workspace_manager_x11_get_type ()")]
	public class WorkspaceManagerX11 : GLib.Object, libxfce4windowing.WorkspaceManager {
		[CCode (has_construct_function = false)]
		protected WorkspaceManagerX11 ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceWayland", type_id = "xfw_workspace_wayland_get_type ()")]
	public class WorkspaceWayland : GLib.Object, libxfce4windowing.Workspace {
		[CCode (has_construct_function = false)]
		protected WorkspaceWayland ();
		[NoAccessorMethod]
		public void* handle { get; construct; }
		public signal void destroyed ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceX11", type_id = "xfw_workspace_x11_get_type ()")]
	public class WorkspaceX11 : GLib.Object, libxfce4windowing.Workspace {
		[CCode (has_construct_function = false)]
		protected WorkspaceX11 ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwScreen", type_id = "xfw_screen_get_type ()")]
	public interface Screen : GLib.Object {
		[CCode (cname = "xfw_screen_get_active_window")]
		public unowned libxfce4windowing.Window? get_active_window ();
		[CCode (cname = "xfw_screen_get_default")]
		public static libxfce4windowing.Screen get_default ();
		[CCode (cname = "xfw_screen_get_show_desktop")]
		public bool get_show_desktop ();
		[CCode (cname = "xfw_screen_get_windows")]
		public unowned GLib.List<libxfce4windowing.Window>? get_windows ();
		[CCode (cname = "xfw_screen_get_windows_stacked")]
		public unowned GLib.List<libxfce4windowing.Window>? get_windows_stacked ();
		[CCode (cname = "xfw_screen_get_workspace_manager")]
		public unowned libxfce4windowing.WorkspaceManager get_workspace_manager ();
		[CCode (cname = "xfw_screen_set_show_desktop")]
		public void set_show_desktop (bool show);
		[NoAccessorMethod]
		public abstract libxfce4windowing.Window active_window { owned get; }
		[NoAccessorMethod]
		public abstract Gdk.Screen screen { owned get; construct; }
		[NoAccessorMethod]
		public abstract bool show_desktop { get; set; }
		[NoAccessorMethod]
		public abstract libxfce4windowing.WorkspaceManager workspace_manager { owned get; }
		public signal void active_window_changed (libxfce4windowing.Window window);
		public signal void window_closed (libxfce4windowing.Window window);
		public signal void window_manager_changed ();
		public signal void window_opened (libxfce4windowing.Window window);
		public signal void window_stacking_changed ();
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspace", type_id = "xfw_workspace_get_type ()")]
	public interface Workspace : GLib.Object {
		[CCode (cname = "xfw_workspace_activate")]
		public bool activate () throws GLib.Error;
		[CCode (cname = "xfw_workspace_get_capabilities")]
		public libxfce4windowing.WorkspaceCapabilities get_capabilities ();
		[CCode (cname = "xfw_workspace_get_geometry")]
		public unowned Gdk.Rectangle? get_geometry ();
		[CCode (cname = "xfw_workspace_get_id")]
		public unowned string get_id ();
		[CCode (cname = "xfw_workspace_get_layout_column")]
		public int get_layout_column ();
		[CCode (cname = "xfw_workspace_get_layout_row")]
		public int get_layout_row ();
		[CCode (cname = "xfw_workspace_get_name")]
		public unowned string get_name ();
		[CCode (cname = "xfw_workspace_get_neighbor")]
		public unowned libxfce4windowing.Workspace? get_neighbor (libxfce4windowing.Direction direction);
		[CCode (cname = "xfw_workspace_get_number")]
		public uint get_number ();
		[CCode (cname = "xfw_workspace_get_state")]
		public libxfce4windowing.WorkspaceState get_state ();
		[CCode (cname = "xfw_workspace_get_workspace_group")]
		public unowned libxfce4windowing.WorkspaceGroup get_workspace_group ();
		[CCode (cname = "xfw_workspace_remove")]
		public bool remove () throws GLib.Error;
		[NoAccessorMethod]
		public abstract libxfce4windowing.WorkspaceCapabilities capabilities { get; set construct; }
		[NoAccessorMethod]
		public abstract libxfce4windowing.WorkspaceGroup group { owned get; construct; }
		[NoAccessorMethod]
		public abstract string id { owned get; }
		[NoAccessorMethod]
		public abstract string name { owned get; set construct; }
		[NoAccessorMethod]
		public abstract uint number { get; construct; }
		[NoAccessorMethod]
		public abstract libxfce4windowing.WorkspaceState state { get; set construct; }
		public signal void capabilities_changed (libxfce4windowing.WorkspaceCapabilities changed_mask, libxfce4windowing.WorkspaceCapabilities new_capabilities);
		public signal void name_changed ();
		public signal void state_changed (libxfce4windowing.WorkspaceState changed_mask, libxfce4windowing.WorkspaceState new_state);
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceGroup", type_id = "xfw_workspace_group_get_type ()")]
	public interface WorkspaceGroup : GLib.Object {
		[CCode (cname = "xfw_workspace_group_create_workspace")]
		public bool create_workspace (string name) throws GLib.Error;
		[CCode (cname = "xfw_workspace_group_get_active_workspace")]
		public unowned libxfce4windowing.Workspace? get_active_workspace ();
		[CCode (cname = "xfw_workspace_group_get_capabilities")]
		public libxfce4windowing.WorkspaceGroupCapabilities get_capabilities ();
		[CCode (cname = "xfw_workspace_group_get_monitors")]
		public unowned GLib.List<Gdk.Monitor>? get_monitors ();
		[CCode (cname = "xfw_workspace_group_get_workspace_count")]
		public uint get_workspace_count ();
		[CCode (cname = "xfw_workspace_group_get_workspace_manager")]
		public unowned libxfce4windowing.WorkspaceManager get_workspace_manager ();
		[CCode (cname = "xfw_workspace_group_list_workspaces")]
		public unowned GLib.List<libxfce4windowing.Workspace>? list_workspaces ();
		[CCode (cname = "xfw_workspace_group_move_viewport")]
		public bool move_viewport (int x, int y) throws GLib.Error;
		[CCode (cname = "xfw_workspace_group_set_layout")]
		public bool set_layout (int rows, int columns) throws GLib.Error;
		[NoAccessorMethod]
		public abstract libxfce4windowing.Workspace active_workspace { owned get; }
		[NoAccessorMethod]
		public abstract void* monitors { get; }
		[NoAccessorMethod]
		public abstract Gdk.Screen screen { owned get; construct; }
		[NoAccessorMethod]
		public abstract libxfce4windowing.WorkspaceManager workspace_manager { owned get; construct; }
		[NoAccessorMethod]
		public abstract void* workspaces { get; }
		public signal void active_workspace_changed (libxfce4windowing.Workspace? previously_active_workspace);
		public signal void capabilities_changed (libxfce4windowing.WorkspaceGroupCapabilities changed_mask, libxfce4windowing.WorkspaceGroupCapabilities new_capabilities);
		public signal void monitors_changed ();
		public signal void viewports_changed ();
		public signal void workspace_created (libxfce4windowing.Workspace workspace);
		public signal void workspace_destroyed (libxfce4windowing.Workspace workspace);
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceManager", type_id = "xfw_workspace_manager_get_type ()")]
	public interface WorkspaceManager : GLib.Object {
		[CCode (cname = "xfw_workspace_manager_list_workspace_groups")]
		public unowned GLib.List<libxfce4windowing.WorkspaceGroup>? list_workspace_groups ();
		[NoAccessorMethod]
		public abstract Gdk.Screen screen { owned get; construct; }
		public signal void workspace_group_created (libxfce4windowing.WorkspaceGroup group);
		public signal void workspace_group_destroyed (libxfce4windowing.WorkspaceGroup group);
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwDirection", cprefix = "XFW_DIRECTION_", type_id = "xfw_direction_get_type ()")]
	public enum Direction {
		UP,
		DOWN,
		LEFT,
		RIGHT
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWindowCapabilities", cprefix = "XFW_WINDOW_CAPABILITIES_", type_id = "xfw_window_capabilities_get_type ()")]
	[Flags]
	public enum WindowCapabilities {
		NONE,
		CAN_MINIMIZE,
		CAN_UNMINIMIZE,
		CAN_MAXIMIZE,
		CAN_UNMAXIMIZE,
		CAN_FULLSCREEN,
		CAN_UNFULLSCREEN,
		CAN_SHADE,
		CAN_UNSHADE,
		CAN_MOVE,
		CAN_RESIZE,
		CAN_PLACE_ABOVE,
		CAN_UNPLACE_ABOVE,
		CAN_PLACE_BELOW,
		CAN_UNPLACE_BELOW,
		CAN_CHANGE_WORKSPACE
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWindowState", cprefix = "XFW_WINDOW_STATE_", type_id = "xfw_window_state_get_type ()")]
	[Flags]
	public enum WindowState {
		NONE,
		ACTIVE,
		MINIMIZED,
		MAXIMIZED,
		FULLSCREEN,
		SKIP_PAGER,
		SKIP_TASKLIST,
		PINNED,
		SHADED,
		ABOVE,
		BELOW,
		URGENT
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWindowType", cprefix = "XFW_WINDOW_TYPE_", type_id = "xfw_window_type_get_type ()")]
	public enum WindowType {
		NORMAL,
		DESKTOP,
		DOCK,
		DIALOG,
		TOOLBAR,
		MENU,
		UTILITY,
		SPLASHSCREEN
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWindowing", cprefix = "XFW_WINDOWING_", has_type_id = false)]
	public enum Windowing {
		UNKNOWN,
		X11,
		WAYLAND
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceCapabilities", cprefix = "XFW_WORKSPACE_CAPABILITIES_", type_id = "xfw_workspace_capabilities_get_type ()")]
	[Flags]
	public enum WorkspaceCapabilities {
		NONE,
		ACTIVATE,
		REMOVE
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceGroupCapabilities", cprefix = "XFW_WORKSPACE_GROUP_CAPABILITIES_", type_id = "xfw_workspace_group_capabilities_get_type ()")]
	[Flags]
	public enum WorkspaceGroupCapabilities {
		NONE,
		CREATE_WORKSPACE,
		MOVE_VIEWPORT,
		SET_LAYOUT
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwWorkspaceState", cprefix = "XFW_WORKSPACE_STATE_", type_id = "xfw_workspace_state_get_type ()")]
	[Flags]
	public enum WorkspaceState {
		NONE,
		ACTIVE,
		URGENT,
		HIDDEN,
		VIRTUAL
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwError", cprefix = "XFW_ERROR_", has_type_id = false)]
	public errordomain Error {
		UNSUPPORTED,
		INTERNAL
	}
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwCreateWorkspaceFunc", has_target = false)]
	public delegate bool CreateWorkspaceFunc (libxfce4windowing.WorkspaceGroup group, string name) throws GLib.Error;
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwMoveViewportFunc", has_target = false)]
	public delegate bool MoveViewportFunc (libxfce4windowing.WorkspaceGroup group, int x, int y) throws GLib.Error;
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "XfwSetLayoutFunc", has_target = false)]
	public delegate bool SetLayoutFunc (libxfce4windowing.WorkspaceGroup group, int rows, int columns) throws GLib.Error;
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "LIBXFCE4WINDOWING_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "LIBXFCE4WINDOWING_MICRO_VERSION")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "LIBXFCE4WINDOWING_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h")]
	public static unowned string? check_version (uint required_major, uint required_minor, uint required_micro);
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "xfw_error_quark")]
	public static GLib.Quark error_quark ();
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "xfw_marshal_VOID__FLAGS_FLAGS")]
	public static void marshal_VOID__FLAGS_FLAGS (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "xfw_screen_get_default")]
	[Version (replacement = "Screen.get_default")]
	public static libxfce4windowing.Screen screen_get_default ();
	[CCode (cheader_filename = "libxfce4windowing/libxfce4windowing.h", cname = "xfw_windowing_get")]
	public static libxfce4windowing.Windowing windowing_get ();
}
